name: Forest app CI/CD aws ECR ECS
run-name: Testing and Deploying Spring Boot App to AWS ECR ECS
on:
  push:
    branches: [ "main" ]
jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      SPRING_DATASOURCE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
      SERVER_PORT: 5000
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Run tests
        run: ./gradlew test

  deploy:
    needs: tests #establecer dependencia de tests
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
      ECR_REPOSITORY: macv9620/backend-forest-app-repository # set this to your Amazon ECR repository name
      ECS_CLUSTER: backend-forest-app-cluster # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: .github/workflows/backend-forest-app-task-definition.json # set this to the path to your Amazon ECS task definition
      ECS_SERVICE: backend-forest-app-service # set this to your Amazon ECS service name
      # file, e.g. .aws/task-definition.json
      CONTAINER_NAME: backend-forest-app-container

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo "$ECR_REGISTRY este es el registro"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true